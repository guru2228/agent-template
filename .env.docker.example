# Environment variables for Docker deployment
# Copy this file to .env.docker and update with your actual values

# ================================
# DATABASE CONFIGURATION - POSTGRESQL
# ================================
# PostgreSQL connection (used by the app service)
DATABASE_URL=postgresql+psycopg://postgres:postgres@postgres:5432/postgres

# Individual database components (for flexibility)
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
POSTGRES_DB=postgres
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres

# ================================
# API KEYS AND SECRETS
# ================================

# Agno API Key
OS_SECURITY_KEY=your_agno_agent_os_api_or_security_key_here

# Google AI API Key (required for Gemini models)
GOOGLE_API_KEY=your_google_api_key_here

# OpenAI API Key (if using OpenAI models)
OPENAI_API_KEY=your_openai_api_key_here

# Anthropic API Key (if using Claude models)
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# ================================
# APPLICATION CONFIGURATION
# ================================
# Application environment
ENVIRONMENT=docker
DEBUG=false

# Logging configuration
LOG_LEVEL=info
LOG_FORMAT=json

# Server configuration
HOST=0.0.0.0
PORT=8000
WORKERS=1

# ================================
# DEVELOPMENT OVERRIDES
# ================================
# These can be uncommented for development
# DEBUG=true
# LOG_LEVEL=debug
# RELOAD=true

# ================================
# SECURITY SETTINGS
# ================================
# Secret key for session management (generate a secure random string)
SECRET_KEY=your-secret-key-change-this-in-production

# CORS settings (adjust for your frontend domain)
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8000

# ================================
# FEATURE FLAGS
# ================================
# Enable/disable specific features
ENABLE_METRICS=true
ENABLE_HEALTH_CHECKS=true
ENABLE_SWAGGER_UI=true
# ================================
# AGENT DEFINITIONS
# ================================
# Agent definitions in YAML format (can be loaded from environment)
# Multiple agents can be defined as a YAML array

AGENT_DEFINITIONS='
- apiVersion: agents.enterprise.com/v1alpha9
  kind: Agent
  metadata:
    name: docs-agent
    namespace: development
  spec:
    identity:
      urn: "urn:agents:enterprise:docs"
      displayName: "Documentation Agent"
      version: "1.0.0"
    deploymentContext:
      tenantId: "dev-tenant-001"
      workspaceId: "docs-dev"
      environment: dev
      tags: ["core", "documentation", "help"]
      lifecycle: development
    role: "Documentation and Help Assistant"
    goal: "Provide comprehensive documentation assistance and help users with Agno framework questions"
    systemPrompt: |
      You are the Agno Documentation Agent, an expert assistant for the Agno framework.
      Your core responsibilities include:
      - Providing comprehensive documentation assistance
      - Helping users understand Agno concepts and features
      - Guiding developers through implementation patterns
      Always be helpful, accurate, and provide practical guidance.
    llm:
      provider: "openai"
      model: "gpt-4"
      parameters:
        temperature: 0.3
        maxTokens: 2000
    mcpServers:
      - name: "docs"
        description: "Documentation server"
        enabled: true
    agentConfig:
      id: "agno_doc_agent"
      user_id: "1"
      session_id: "user_1_session"
      markdown: true

- apiVersion: agents.enterprise.com/v1alpha9
  kind: Agent
  metadata:
    name: support-agent
    namespace: default
  spec:
    identity:
      urn: "urn:agents:enterprise:support-agent"
      displayName: "Support Agent"
      version: "1.0.0"
    deploymentContext:
      tenantId: "tenant-001"
      workspaceId: "support-workspace"
      environment: dev
      tags: ["support", "customer-service", "help-desk"]
      lifecycle: development
    role: "Customer Support Specialist"
    goal: "Provide helpful customer support and resolve issues efficiently"
    systemPrompt: |
      You are a Customer Support Specialist, expert at helping customers with inquiries and issues.
      Your capabilities include:
      - Answering frequently asked questions
      - Troubleshooting common issues
      - Providing excellent customer service
      Always be professional, empathetic, and solution-focused.
    llm:
      provider: "openai"
      model: "gpt-4"
      parameters:
        temperature: 0.4
        maxTokens: 1500
    agentConfig:
      id: "support_agent"
      user_id: "1"
      session_id: "support_session"
      markdown: true

- apiVersion: agents.enterprise.com/v1alpha9
  kind: Agent
  metadata:
    name: research-assistant
    namespace: default
  spec:
    identity:
      urn: "urn:agents:enterprise:research-assistant"
      displayName: "Research Assistant"
      version: "2.1.0"
    deploymentContext:
      tenantId: "tenant-001"
      workspaceId: "research-workspace"
      environment: staging
      tags: ["research", "analysis", "knowledge-work"]
      lifecycle: testing
    role: "Senior Research Analyst"
    goal: "Conduct comprehensive research and provide well-documented insights"
    systemPrompt: |
      You are a senior research analyst with extensive experience in information gathering and analysis.
      Your capabilities include:
      - Conducting thorough research from multiple sources
      - Analyzing complex information and identifying patterns
      - Synthesizing findings into clear, actionable insights
      Always provide evidence-based analysis and cite your sources.
    llm:
      provider: "openai"
      model: "gpt-4"
      parameters:
        temperature: 0.2
        maxTokens: 3000
    agentConfig:
      id: "research_assistant"
      user_id: "1"
      session_id: "research_session"
      markdown: true
'
